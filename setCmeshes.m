

function [npoint, nline, nloop, nsurface] = setCmeshes(fo, Ni, ...
    npoint, nline, nloop, nsurface, ...
    npoint_per_level, nline_airfoil, npoint_airfoil, nradii, nres, n_airfoil, n_inlet, n_wake, n_vert, n_thick)



% NACA = [0 0 1 2];           % NACA 4-digit designation as a row vector;

sizeNACA = 5e-3;            % resolution at wall
sizeWake = 0.25; % 5e-2;            % resolution at wake
sizeFar  = 1;               % resolution at far field
shrink = 0.7;


n_vertical = nres * (60*shrink+25);
r_vertical=1.015;
% n_wake = nres * 110;

r_wake_airfoil = 1.005;

% n_vert = nres * 70;

% n_inlet = nres * 40;
r_inlet = 0.3;


Nsplit = round(0.24 * Ni);

ext_points_per_level = 18;
for i = 1 : nradii
% for i = 1 : 2
    fprintf(fo, '\n' );
    % Create the horizontal lines 
    nline_per_level = 18;
    
    
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 1);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 1,   (i - 1) * 2 * (Ni - 1) + Nsplit, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 3);
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 2);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 2, (i - 1) * 2 * (Ni - 1) + Ni, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 5);
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 3);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 3, (i - 1) * 2 * (Ni - 1) + Ni, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 7);
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 4);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 4, (i - 1) * 2 * (Ni - 1) + Ni, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 6);
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 5);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 5, (i - 1) * 2 * (Ni - 1) + 2 * Ni - Nsplit, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 4); 
    fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 6);
    fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 6, (i - 1) * 2 * (Ni - 1) + 1, nradii * 2 * (Ni - 1) + ext_points_per_level * (i - 1) + 8);    
    
 
    if(i < nradii)
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 7);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 7,  npoint_per_level * (i - 1) + Nsplit, npoint_per_level * i + Nsplit);
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 8);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 8, npoint_per_level * (i - 1) + Ni, npoint_per_level * i + Ni);
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 9);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 9, npoint_per_level * (i - 1) + 2 * Ni - Nsplit, npoint_per_level * i + 2 * Ni - Nsplit);
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 10);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 10, npoint_per_level * (i - 1) + 1, npoint_per_level * i + 1);
        
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 11);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 11, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 1, nradii * npoint_per_level + ext_points_per_level * i + 1);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 12);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 12, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 2, nradii * npoint_per_level + ext_points_per_level * i + 2);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 13);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 13, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 3, nradii * npoint_per_level + ext_points_per_level * i + 3);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 14);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 14, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 4, nradii * npoint_per_level + ext_points_per_level * i + 4);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 15);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 15, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 5, nradii * npoint_per_level + ext_points_per_level * i + 5);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 16);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 16, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 6, nradii * npoint_per_level + ext_points_per_level * i + 6);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 17);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 17, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 7, nradii * npoint_per_level + ext_points_per_level * i + 7);  
        fprintf(fo, 'L_airfoil_%d = newc;\n', nline_per_level * (i - 1) + 18);
        fprintf(fo, 'Line(L_airfoil_%d) = {%d, %d};\n', nline_per_level * (i - 1) + 18, nradii * npoint_per_level + ext_points_per_level * (i - 1) + 8, nradii * npoint_per_level + ext_points_per_level * i + 8);           
        
    end    
    
end

% % Add transfinite curves

for i = 1 : nradii
    fprintf(fo, '\n' );
    fprintf(fo, 'Transfinite Curve {L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d} = %d Using Progression %f;\n', ...
        nline_per_level * (i - 1) + 6, nline_per_level * (i - 1) + 1, ...
        nline_per_level * (i - 1) + 5, nline_per_level * (i - 1) + 2, ...
        nline_per_level * (i - 1) + 4, n_thick, r_vertical);
    fprintf(fo, 'Transfinite Curve {L_airfoil_%d} = %d Using Progression %f;\n', ...
        nline_per_level * (i - 1) + 3, ...
        n_wake, r_wake_airfoil);   
    if(i < nradii)
        fprintf(fo, 'Transfinite Curve {L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, L_airfoil_%d} = %d Using Progression 1;\n', ...
            nline_per_level * (i - 1) + 7, nline_per_level * (i - 1) + 8, ...
            nline_per_level * (i - 1) + 9, nline_per_level * (i - 1) + 10, ...
            nline_per_level * (i - 1) + 11, nline_per_level * (i - 1) + 12, ...
            nline_per_level * (i - 1) + 13, nline_per_level * (i - 1) + 14, ...
            nline_per_level * (i - 1) + 15, nline_per_level * (i - 1) + 16, ...
            nline_per_level * (i - 1) + 17, nline_per_level * (i - 1) + 18, n_vert);    
    end
end



% Create the curve loops

for i = 1 : nradii - 1
    % newcl
    nloop_per_level = 24;
    n_ext_line_per_level = 8;
    nline_airfoil_per_level = 6;
    fprintf(fo, '\n' );
    
    

    % Horizontal faces    
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 1);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 1, ...
        nline_airfoil_per_level * (i - 1) + 4, ...
        nline_per_level * (i - 1) + 1, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 1, ...
        nline_per_level * (i - 1) + 2);        
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 2);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, %d, %d};\n', ...
        nloop_per_level * (i - 1) + 2, ...
        nline_per_level * (i - 1) + 3, ...
        nline_per_level * (i - 1) + 2, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 3, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 5);            
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 3);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, - %d, - %d};\n', ...
        nloop_per_level * (i - 1) + 3, ...
        nline_per_level * (i - 1) + 4, ...
        nline_per_level * (i - 1) + 3, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 6, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 4);     
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 4);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 4, ...
        nline_airfoil_per_level * (i - 1) + 5, ...
        nline_per_level * (i - 1) + 4, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 2, ...
        nline_per_level * (i - 1) + 5);     
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 5);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 5, ...
        nline_airfoil_per_level * (i - 1) + 6, ...
        nline_per_level * (i - 1) + 5, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 7, ...
        nline_per_level * (i - 1) + 6);       
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 6);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 6, ...
        nline_airfoil_per_level * (i - 1) + 3, ...
        nline_per_level * (i - 1) + 6, ...
        nline_airfoil + (i - 1) * n_ext_line_per_level + 8, ...
        nline_per_level * (i - 1) + 1);     
    
       
    % Vertical faces
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 7);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 7, nline_per_level * (i - 1) + 1, nline_per_level * (i - 1) + 7, ...
        nline_per_level * i + 1, nline_per_level * (i - 1) + 13);    
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 8);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 8, nline_per_level * (i - 1) + 2, nline_per_level * (i - 1) + 8, ...
        nline_per_level * i + 2, nline_per_level * (i - 1) + 15);      
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 9);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 9, nline_per_level * (i - 1) + 3, nline_per_level * (i - 1) + 8, ...
        nline_per_level * i + 3, nline_per_level * (i - 1) + 17);    
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 10);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 10, nline_per_level * (i - 1) + 4, nline_per_level * (i - 1) + 8, ...
        nline_per_level * i + 4, nline_per_level * (i - 1) + 16);       
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 11);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 11, nline_per_level * (i - 1) + 5, nline_per_level * (i - 1) + 9, ...
        nline_per_level * i + 5, nline_per_level * (i - 1) + 14);      
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 12);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, L_airfoil_%d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 12, nline_per_level * (i - 1) + 6, nline_per_level * (i - 1) + 10, ...
        nline_per_level * i + 6, nline_per_level * (i - 1) + 18);   
    
    
    % Exterior faces

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 13);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {%d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 13, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 1, ...
    nline_per_level * (i - 1) + 15, ...
    nline_airfoil + i * n_ext_line_per_level + 1, ...
    nline_per_level * (i - 1) + 13);   

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 14);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {%d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 14, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 3, ...
    nline_per_level * (i - 1) + 11, ...
    nline_airfoil + i * n_ext_line_per_level + 3, ...
    nline_per_level * (i - 1) + 15);   

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 15);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {%d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 15, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 5, ...
    nline_per_level * (i - 1) + 17, ...
    nline_airfoil + i * n_ext_line_per_level + 5, ...
    nline_per_level * (i - 1) + 11);   

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 16);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 16, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 6, ...
    nline_per_level * (i - 1) + 12, ...
    nline_airfoil + i * n_ext_line_per_level + 6, ...
    nline_per_level * (i - 1) + 17);  

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 17);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 17, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 4, ...
    nline_per_level * (i - 1) + 16, ...
    nline_airfoil + i * n_ext_line_per_level + 4, ...
    nline_per_level * (i - 1) + 12);  

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 18);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 18, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 2, ...
    nline_per_level * (i - 1) + 14, ...
    nline_airfoil + i * n_ext_line_per_level + 2, ...
    nline_per_level * (i - 1) + 16);  
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 19);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {%d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 19, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 7, ...
    nline_per_level * (i - 1) + 18, ...
    nline_airfoil + i * n_ext_line_per_level + 7, ...
    nline_per_level * (i - 1) + 14);  

    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 20);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 20, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 8, ...
    nline_per_level * (i - 1) + 13, ...
    nline_airfoil + i * n_ext_line_per_level + 8, ...
    nline_per_level * (i - 1) + 18);  


    % Faces on the airfoil   
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 21);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 21, ...
        nline_airfoil_per_level * (i - 1) + 4, ...
        nline_per_level * (i - 1) + 7, ...
        nline_airfoil_per_level * i + 4, ...
        nline_per_level * (i - 1) + 8);    
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 22);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 22, ...
        nline_airfoil_per_level * (i - 1) + 5, ...
        nline_per_level * (i - 1) + 8, ...
        nline_airfoil_per_level * i + 5, ...
        nline_per_level * (i - 1) + 9);        
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 23);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 23, ...
        nline_airfoil_per_level * (i - 1) + 6, ...
        nline_per_level * (i - 1) + 9, ...
        nline_airfoil_per_level * i + 6, ...
        nline_per_level * (i - 1) + 10);       
    
    fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 24);
    fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
        nloop_per_level * (i - 1) + 24, ...
        nline_airfoil_per_level * (i - 1) + 3, ...
        nline_per_level * (i - 1) + 10, ...
        nline_airfoil_per_level * i + 3, ...
        nline_per_level * (i - 1) + 7);      

end

i = nradii;  

% Horizontal faces at the last level  

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 1);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 1, ...
    nline_airfoil_per_level * (i - 1) + 4, ...
    nline_per_level * (i - 1) + 1, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 1, ...
    nline_per_level * (i - 1) + 2);        

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 2);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, %d, %d};\n', ...
    nloop_per_level * (i - 1) + 2, ...
    nline_per_level * (i - 1) + 3, ...
    nline_per_level * (i - 1) + 2, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 3, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 5);            

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 3);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- L_airfoil_%d, L_airfoil_%d, - %d, - %d};\n', ...
    nloop_per_level * (i - 1) + 3, ...
    nline_per_level * (i - 1) + 4, ...
    nline_per_level * (i - 1) + 3, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 6, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 4);     

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 4);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 4, ...
    nline_airfoil_per_level * (i - 1) + 5, ...
    nline_per_level * (i - 1) + 4, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 2, ...
    nline_per_level * (i - 1) + 5);     

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 5);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 5, ...
    nline_airfoil_per_level * (i - 1) + 6, ...
    nline_per_level * (i - 1) + 5, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 7, ...
    nline_per_level * (i - 1) + 6);       

fprintf(fo, 'CL_airfoil_%d = newcl;\n', nloop_per_level * (i - 1) + 6);
fprintf(fo, 'Curve Loop(CL_airfoil_%d) = {- %d, L_airfoil_%d, - %d, - L_airfoil_%d};\n', ...
    nloop_per_level * (i - 1) + 6, ...
    nline_airfoil_per_level * (i - 1) + 3, ...
    nline_per_level * (i - 1) + 6, ...
    nline_airfoil + (i - 1) * n_ext_line_per_level + 8, ...
    nline_per_level * (i - 1) + 1);  


% Create the surfaces
% news
% fprintf(fo, 'Plane Surface(%d) = {%d};\n', nsurface + 1, nloop + 1);
fprintf(fo, '\n' );
for i = 1 : nradii - 1
    for j = 1 : nloop_per_level
        fprintf(fo, 'S_airfoil_%d = news;\n', (i - 1) * nloop_per_level + j); 
        fprintf(fo, 'Surface(S_airfoil_%d) = {CL_airfoil_%d};\n', ...
            (i - 1) * nloop_per_level + j, (i - 1) * nloop_per_level + j);
    end
end
i = nradii;
for j = 1 : 6
    fprintf(fo, 'S_airfoil_%d = news;\n', (i - 1) * nloop_per_level + j); 
    fprintf(fo, 'Surface(S_airfoil_%d) = {CL_airfoil_%d};\n', ...
        (i - 1) * nloop_per_level + j, (i - 1) * nloop_per_level + j);
end


% Create Transfinite Surfaces


fprintf(fo, '\n' );
for i = 1 : nradii - 1
    for j = 1 : nloop_per_level
        fprintf(fo, 'Transfinite Surface {S_airfoil_%d};\n', (i - 1) * nloop_per_level + j);        
    end
end
i = nradii;
for j = 1 : 6
    fprintf(fo, 'Transfinite Surface {S_airfoil_%d};\n', (i - 1) * nloop_per_level + j);  
end



% Recombine surfaces

fprintf(fo, '\n' );
fprintf(fo, 'Recombine Surface {');
for i = 1 : nradii - 1
    for j = 1 : nloop_per_level
        fprintf(fo, 'S_airfoil_%d, ', (i - 1) * nloop_per_level + j);
    end
end
i = nradii;
for j = 1 : 6
    fprintf(fo, 'S_airfoil_%d, ', (i - 1) * nloop_per_level + j);
end
fprintf(fo, 'S_airfoil_%d', (i - 1) * nloop_per_level + 6);
fprintf(fo, '};\n' );








% Create the surface loops
% newsl
nsloop_per_level = 6;
fprintf(fo, '\n' );
for i = 1 : nradii - 1
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 1);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 1, ...
        nloop_per_level * (i - 1) + 1, ...
        nloop_per_level * (i - 1) + 7, ...
        nloop_per_level * (i - 1) + 8, ...
        nloop_per_level * i + 1, ...
        nloop_per_level * (i - 1) + 13, ...
        nloop_per_level * (i - 1) + 21);    
    
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 2);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 2, ...
        nloop_per_level * (i - 1) + 2, ...
        nloop_per_level * (i - 1) + 8, ...
        nloop_per_level * (i - 1) + 9, ...
        nloop_per_level * i + 2, ...
        nloop_per_level * (i - 1) + 14, ...
        nloop_per_level * (i - 1) + 15);       
    
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 3);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 3, ...
        nloop_per_level * (i - 1) + 3, ...
        nloop_per_level * (i - 1) + 9, ...
        nloop_per_level * (i - 1) + 10, ...
        nloop_per_level * i + 3, ...
        nloop_per_level * (i - 1) + 16, ...
        nloop_per_level * (i - 1) + 17);    
 
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 4);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 4, ...
        nloop_per_level * (i - 1) + 4, ...
        nloop_per_level * (i - 1) + 10, ...
        nloop_per_level * (i - 1) + 11, ...
        nloop_per_level * i + 4, ...
        nloop_per_level * (i - 1) + 18, ...
        nloop_per_level * (i - 1) + 22);   
    
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 5);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 5, ...
        nloop_per_level * (i - 1) + 5, ...
        nloop_per_level * (i - 1) + 11, ...
        nloop_per_level * (i - 1) + 12, ...
        nloop_per_level * i + 5, ...
        nloop_per_level * (i - 1) + 19, ...
        nloop_per_level * (i - 1) + 23);      
    
    fprintf(fo, 'SL_airfoil_%d = newsl;\n', (i - 1) * nsloop_per_level + 6);
    fprintf(fo, 'Surface Loop(SL_airfoil_%d) = {S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d, S_airfoil_%d};\n', ...
        (i - 1) * nsloop_per_level + 6, ...
        nloop_per_level * (i - 1) + 6, ...
        nloop_per_level * (i - 1) + 12, ...
        nloop_per_level * (i - 1) + 7, ...
        nloop_per_level * i + 6, ...
        nloop_per_level * (i - 1) + 20, ...
        nloop_per_level * (i - 1) + 24);       
    
end



% Create the volumes
% newv
nvolume_per_level = 6;
fprintf(fo, '\n' );
for i = 1 : nradii - 1
    for j = 1 : nvolume_per_level
        fprintf(fo, 'V_airfoil_%d = newv;\n', (i - 1) * nvolume_per_level + j);
        fprintf(fo, 'Volume(V_airfoil_%d) = {SL_airfoil_%d};\n', (i - 1) * nvolume_per_level + j, (i - 1) * nsloop_per_level + j);
    end
end

% Create transfinite volumes

fprintf(fo, '\n' );
for i = 1 : nradii - 1
    for j = 1 : nvolume_per_level
        fprintf(fo, 'Transfinite Volume {V_airfoil_%d};\n', (i - 1) * nvolume_per_level + j);
    end
end

end

